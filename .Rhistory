label_point<-first_cells[i,"ROW"]
if(b.==TRUE){
text(x,y-length,label=label_point,col='black',cex=0.8,font=2)}
}
a<-which(colnames(data_year)=="SQRLENGTH")
data_year<-data_year[,-a]
name<-paste(sample,"-",as.character(year),sep="")
assign(name,data_year)
}
if(length(years)==1){
output_all_years<-get(paste(sample,"-",as.character(years[1]),sep=""))
}else{
output_all_years<-get(paste(sample,"-",as.character(years[1]),sep=""))
for(t in c(2:(length(years)-1))){
output_all_years<-rbind(output_all_years,get(paste(sample,"-",as.character(years[t]),sep="")))
}
}
if(is.character(location)==TRUE){
write.table(output_all_years,file=paste(sample,"_output.txt",sep=""),row.names=FALSE,sep="\t")
if(b.==TRUE){dev.off()}
}
}
}
input<-example.data(species="LOT_PICEA")
source('C:/Users/ahurl/OneDrive/DOC/PhD/author/raptor/all.examples.R')
?align
input<-is.raptor(example.data(species="LOT_PICEA"), str=FALSE)
#' @title Testing and preparing input data
#'
#' @description Testing if the structure of the input matches the requirements for the RAPTOR functions. The input has to be presented in a \code{\link{data.frame}} composed by column with 1) sample id \emph{<\code{\link{as.character}}/\code{\link{as.factor}}>}, 2) tracheid id \emph{<\code{\link{as.integer}}>}, 3) tree-ring year \emph{<\code{\link{as.numeric}}>}, 4) lumen size \emph{<\code{\link{as.numeric}}>}, 5) the x coordinate of the cell \emph{<\code{\link{as.numeric}}>} and 6) the y coordinate of the cell \emph{<\code{\link{as.numeric}}>}. The ring is oriented in order to have the latewood cells on the upper section of the image. For this function either the order or the number of columns have to be respected or the following column names have to be present within the \code{\link{data.frame}}: "ID" = sample id, "CID" = tracheid id, "YEAR" = year, "CA" = lumen size (micron), "XCAL" = x coordinate, "YCAL" = y coordinate. Additionally, at least 50 tracheid's (or cells) have to be present in each year.
#' @param data a \code{\link{data.frame}} where tracheids are ordered in rows and the columns contain the variable sample id, cell id, year, tracheid lumen area, x coordinates and y coordinates. The name of the columns (\code{\link{colnames}}) have to either be named as " ID","CID","YEAR","CA","XCAL" and "YCAL" or properly ordered.
#' @param str a logical flag. If \code{\link{TRUE}} the structure of the data will be printed (default = \code{\link{FALSE}}).
#' @details To prevent errors occurring in the other reported functions, it is advised to run this function for checking the data structure and preparing it for further analyses. This function also installs all required packages (gam, mgcv) to run the RAPTOR functions.
#' @import
#' gam
#' mgcv
#' @export
#' @seealso \code{\link{anatomy.data}}
#' @return A \code{\link{data.frame}} in the appropriate format for other functionalities.
#' @examples
#' #validating example data
#' input<-example.data(species="LOT_PICEA")
#' input<-is.raptor(input, str=TRUE)
#' View(input)
is.raptor<-function(data,str=TRUE){
list.of.packages <- c("mgcv","gam","base")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
require("gam")
require("mgcv")
require("base")
left = function(string, char){substr(string, 1,char)}
right = function (string, char){substr(string,nchar(string)-(char-1),nchar(string))}
if(ncol(data)==6){
if((is.character(unique(data[,1]))|is.factor(unique(data[,1])))==FALSE)stop('missing ID, value not as character or factor')
if((is.numeric(unique(data[,2]))|is.integer(unique(data[,2])))==FALSE)stop('missing CID, value not as integer')
if(is.numeric(unique(data[,3]))==FALSE)stop('missing YEAR, value not as numeric')
if(is.numeric(unique(data[,4]))==FALSE)stop('missing CA, value not as numeric')
if(is.numeric(unique(data[,5]))==FALSE)stop('missing XCAL, value not as numeric')
if(is.numeric(unique(data[,6]))==FALSE)stop('missing YCAL, value not as numeric')
colnames(data)<-c("ID","CID","YEAR","CA","XCAL","YCAL")
}else{
if(length(which(colnames(data)=="ID"))==0)stop('missing ID')
if(length(which(colnames(data)=="CID"))==0)stop('missing CID')
if(length(which(colnames(data)=="YEAR"))==0)stop('missing YEAR')
if(length(which(colnames(data)=="CA"))==0)stop('missing CA')
if(length(which(colnames(data)=="XCAL"))==0)stop('missing XCAL')
if(length(which(colnames(data)=="YCAL"))==0)stop('missing YCAL')
}
for(c in c(1:length(unique(data[,"YEAR"])))){if(length(which(data[,"YEAR"]==unique(data[c,"YEAR"])))<50)stop(paste("year ",unique(data[c,"YEAR"])," has less than 50 rows",sep=""))}
data<-data.frame(data)
select<-FALSE
if(missing(str)){str<-FALSE}
if(str==TRUE){select<-TRUE}
if(select==TRUE){print(str(data))}
return(data)}
input<-is.raptor(example.data(species="LOT_PICEA"), str=FALSE)
input
input
input<-is.raptor(example.data(species="LOT_PICEA"), str=FALSE)
read.table("D:\\Documents\\WSL\\07_work_documents\\2_results_excel\Chapter 2 - Anatomical analysis\\RAPTOR\\Manuscript 08-05-2017\\Nieuwe map\\example.data.txt",header=TRUE,sep="\t")
read.table("D:\\Documents\\WSL\\07_work_documents\\2_results_excel\Chapter 2 - Anatomical analysis\\RAPTOR\\Manuscript 08-05-2017\\Nieuwe map\\example.data.txt",header=TRUE,sep="\t")
input<-read.table("D:\\Documents\\WSL\\07_work_documents\\2_results_excel\\Chapter 2 - Anatomical analysis\\RAPTOR\\Manuscript 08-05-2017\\Nieuwe map\\example.data.txt",header=TRUE,sep="\t")
align<-function(input,year=FALSE,list=FALSE,interact=TRUE,make.plot=TRUE){
input
input
input[,"YEAR"]
is.na(input[,"YEAR"])
is.na(input[,"YEAR"])==TRUE
which(is.na(input[,"YEAR"])==TRUE)
length(which(is.na(input[,"YEAR"])==TRUE))==0
library(RAPTOR)
?anatomy.data
?align
library(RAPTOR)
?align
library(RAPTOR)
align(input)
R CMD CHeck
?batch.mode
devtools::load_all()
?person
person('Richard', 'Pters', role = c('aut', 'cre'))
person(c('Richard L. Peters [aut, cre,cph]')
)
person(c('Richard L. Peters [aut, cre,cph]'))
person(c('Richard L. Peters [aut, cre,cph]',
'Alexander Hurley [ctr]',
'Daniel Balanzategui [ctr]',
'Angela Luisa Prendin [crt]',
'Georg von Arx [aut]',
'Henri E. Cuny [ctr]',
'Jesper Bjoerklund [ctr]',
'David C. Frank [ctr]',
'Patrick Fonti [ths,ctr.fnd]'))
c(
person('Richard L. Peters', role =  [aut, cre,cph]')
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph'))
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph'))
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
)
person('Richard L. Peters', role =  c('aut', 'cre', 'cph'))
person('Alexander Hurley', role =  c('ctr'))
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr'))
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr')),
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr'))
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr')),
person('Angela Luisa Prendin', role = 'ctr'),
person('Georg von Arx', role = 'ctr'),
person('Henri E. Cuny', role = 'ctr'),
person('Jesper Bjoerklund' role = 'ctr'),
person('David C. Frank', role = 'ctr'),
person('Patrick Fonti', role = c('ths','ctr.fnd')
)
person('Henri E. Cuny', role = 'ctr')
person('Jesper Bjoerklund' role = 'ctr'),
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr')),
person('Angela Luisa Prendin', role = 'ctr'),
person('Georg von Arx', role = 'ctr'),
person('Henri E. Cuny', role = 'ctr'),
person('Jesper Bjoerklund', role = 'ctr'),
person('David C. Frank', role = 'ctr'),
person('Patrick Fonti', role = c('ths','ctr.fnd')
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr')),
person('Angela Luisa Prendin', role = 'ctr'),
person('Georg von Arx', role = 'ctr'),
person('Henri E. Cuny', role = 'ctr'),
person('Jesper Bjoerklund', role = 'ctr'),
person('David C. Frank', role = 'ctr'),
person('Patrick Fonti', role = c('ths','ctr.fnd')
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr')),
person('Angela Luisa Prendin', role = 'ctr'),
person('Georg von Arx', role = 'ctr'),
person('Henri E. Cuny', role = 'ctr'),
person('Jesper Bjoerklund', role = 'ctr'),
person('David C. Frank', role = 'ctr'),
person('Patrick Fonti', role = c('ths','ctr.fnd'))
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr')),
person('Angela Luisa Prendin', role = 'ctr'),
person('Georg von Arx', role = 'ctr'),
person('Henri E. Cuny', role = 'ctr'),
person('Jesper Bjoerklund', role = 'ctr'),
person('David C. Frank', role = 'ctr'),
person('Patrick Fonti', role = c('ths','ctr.fnd'))
)
c(
person('Richard L. Peters', role =  c('aut', 'cre', 'cph')),
person('Alexander Hurley', role =  c('ctr')),
person('Daniel Balanzategui', role =  c('ctr')),
person('Angela Luisa Prendin', role = 'ctr'),
person('Georg von Arx', role = 'ctr'),
person('Henri E. Cuny', role = 'ctr'),
person('Jesper Bjoerklund', role = 'ctr'),
person('David C. Frank', role = 'ctr'),
person('Patrick Fonti', role = c('ths','ctr','fnd'))
)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
devtools::load_all()
source('C:/Users/ahurl/OneDrive/DOC/PhD/author/raptor/R/plot.cells.R')
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::load_all()
?anatomy.data
anatomy.data
devtools::document()
devtools::load_all(".")
library("roxygen2", lib.loc="C:/Users/ahurl/OneDrive/DOC/PhD/author/raptor/packrat/lib/x86_64-w64-mingw32/3.3.1")
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
.rs.rVersionString()
align<-function(input,year=FALSE,list=FALSE,interact=TRUE,make.plot=TRUE){
input<-read.table("D:\\Documents\\WSL\\07_work_documents\\2_results_excel\\Chapter 2 - Anatomical analysis\\RAPTOR\\Manuscript 08-05-2017\\Nieuwe map\\example.data.txt",header=TRUE,sep="\t")
input<-is.raptor(example.data(species="LOT_PICEA"), str=FALSE)
#year<-2008
#list<-c("v","v","v","h")
#interact=FALSE
#make.plot=FALSE
#input <- prep(example.data(roxas = TRUE))
#input<-prep(read.table(files[file],header=TRUE,sep="\t"))
if(missing(year)){year<-FALSE}
if(missing(interact)){interact<-FALSE}
if(missing(list)){list<-FALSE}
if(missing(make.plot)){make.plot<-FALSE}
if(length(which(is.na(input[,"YEAR"])==TRUE))!=0)stop('year column contains NA')
if(interact==TRUE & list[1]==FALSE){
if(year==FALSE){
year<-unique(input[,"YEAR"])
}else{
if(length(year)==1){
if(length(which(unique(input[,"YEAR"])==year))==0)stop('year is not present in data.frame')
}else{
if(length(which(unique(input[,"YEAR"])==year))!=length(year))stop('not all years are present in data.frame')
}}
for(i in c(1:length(year))){
#i<-1
iso<-input[which(input[,"YEAR"]==year[i]),]
iso[,"XCAL"]<-iso[,"XCAL"]-(min(iso[,"XCAL"],na.rm=TRUE))+1
iso[,"YCAL"]<-iso[,"YCAL"]-(min(iso[,"YCAL"],na.rm=TRUE))+1
repeat{
layout(matrix(c(1),nc=1, byrow = TRUE))
par(mar=c(5,5,3,1))
plot(0,0,ylab="Y-coordinates (micron)",xlab="X-coordinates (micron)",xlim=c(0-max(iso[,"XCAL"],na.rm=TRUE)*0.01,max(iso[,"XCAL"],na.rm=TRUE)),ylim=c(0,max(iso[,"YCAL"],na.rm=TRUE)),col="white",main=paste(unique(iso[,"ID"]),unique(iso[,"YEAR"]),sep=" - "))
points(iso[,"XCAL"],iso[,"YCAL"],pch=16,cex=0.5)
for(c in c(1:10)){
abline(lm(c(seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"],na.rm=TRUE))),lty=1,col="black")
text(0-max(iso[,"XCAL"],na.rm=TRUE)*0.01,seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],round(lm(c(seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"],na.rm=TRUE)))$coefficients[2],2),cex=0.8,pos=3)}
lines(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),1],cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),2],lwd=2,col="grey")
text(max(iso[,"XCAL"],na.rm=TRUE),as.numeric(lm(iso[,"YCAL"]~iso[,"XCAL"])$coefficients[1]+lm(iso[,"YCAL"]~iso[,"XCAL"])$coefficients[2]*max(iso[,"XCAL"],na.rm=TRUE)),"H",col="grey",pos=3)
lines(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),1],cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),2],lwd=2,col="grey")
text(as.numeric(lm(iso[,"XCAL"]~iso[,"YCAL"])$coefficients[1]+lm(iso[,"XCAL"]~iso[,"YCAL"])$coefficients[2]*max(iso[,"YCAL"],na.rm=TRUE)),max(iso[,"YCAL"],na.rm=TRUE),"V",col="grey",pos=4)
option<-readline("SELECT - align cells to vertical line [v] / horizontal line [h] / slope [x.xx] / end [x] : ")
output<-matrix(nrow=length(iso[,"XCAL"]),ncol=2)
colnames(output)<-c("X_CAL","Y_CAL")
#still need to tranfors it to a horizontal line
if(option!="x"&option!="v"&option!="h"& is.na(suppressWarnings(as.numeric(option)))==TRUE){
print('Option is not available')
next}
if(option=="x"){
print("end align")
break}
if(option=="v"){
model<-lm(iso[,"XCAL"]~iso[,"YCAL"])
y1<-mean(iso[,"YCAL"],na.rm=TRUE)
x1<-mean(iso[,"XCAL"],na.rm=TRUE)
y2<-max(iso[,"YCAL"],na.rm=TRUE)
x2<-summary(model)$coefficient[1]+summary(model)$coefficient[2]*y2
r<-y2-y1
radians<-c(0:360)*pi/180
x_line<-r*sin(radians)+x1
y_line<-r*cos(radians)+y1
new_angle<-atan( (x2-x1)/ (y2-y1) )*(180/pi)+90
x2<-r*sin(new_angle*(pi/180))+x1
y2<-r*cos(new_angle*(pi/180))+y1
model<-(lm(c(y1,y2)~c(x1,x2)))
}
if(option=="h"){model<-lm(iso[,"YCAL"]~iso[,"XCAL"])}
if(option!="v"&option!="h"){
option<-as.numeric(option)
model<-lm(c(mean(iso[,"YCAL"],na.rm=TRUE)-mean(iso[,"XCAL"],na.rm=TRUE)*option,mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"])))}
abline(model,col="red",lwd=2)
y_model<-as.numeric(c(model$coefficients[2]*0+model$coefficients[1],model$coefficients[2]*100+model$coefficients[1]))
change_angle<-atan((y_model[2]-y_model[1])/(100-0))*(180/pi)
for(p in c(1:length(iso[,"XCAL"]))){
r<-sqrt(iso[p,"XCAL"]^2+iso[p,"YCAL"]^2)
radians<-c(0:360)*pi/180
x_line<-r*sin(radians)
y_line<-r*cos(radians)
current_angle<-atan(iso[p,"XCAL"]/iso[p,"YCAL"])*(180/pi)
new_angle<-current_angle+change_angle
x_new<-r*sin(new_angle*(pi/180))
y_new<-r*cos(new_angle*(pi/180))
points(x_new,y_new,pch=16,col="red",cex=1)
output[p,"X_CAL"]<-x_new
output[p,"Y_CAL"]<-y_new}
check<-readline("SELECT - is alignment correct yes [y] / no [n] : ")
if(check!="y"&check!="n"){
print('should be Y/N')
next}
if(check=="n"){next}
if(check=="y"){break}
}
if(option=="x"){break}
subtract_Y<-min(output[,"Y_CAL"],na.rm=TRUE)
if(subtract_Y<0){
output[,"Y_CAL"]<-output[,"Y_CAL"]-subtract_Y
}else{
output[,"Y_CAL"]<-output[,"Y_CAL"]
}
subtract_X<-min(output[,"X_CAL"],na.rm=TRUE)
if(subtract_X<0){
output[,"X_CAL"]<-output[,"X_CAL"]-subtract_X
}else{
output[,"X_CAL"]<-output[,"X_CAL"]
}
input[which(input[,"YEAR"]==year[i]),"XCAL"]<-output[,"X_CAL"]
input[which(input[,"YEAR"]==year[i]),"YCAL"]<-output[,"Y_CAL"]
}
}
if(interact==TRUE & is.numeric(list)==TRUE)stop('this is not an option')
if(interact==FALSE){
if(year[1]==FALSE){
year<-unique(input[,"YEAR"])
}else{
if(length(year)==1){
if(length(which(unique(input[,"YEAR"])==year))==0)stop('year is not present in data.frame')
}else{
if(length(which(unique(input[,"YEAR"])==year))!=length(year))stop('not all years are present in data.frame')
}}
if(list[1]==FALSE){
for(i in c(1:length(year))){
#i<-1
iso<-input[which(input[,"YEAR"]==year[i]),]
iso[,"XCAL"]<-iso[,"XCAL"]-(min(iso[,"XCAL"],na.rm=TRUE))+1
iso[,"YCAL"]<-iso[,"YCAL"]-(min(iso[,"YCAL"],na.rm=TRUE))+1
if(make.plot==TRUE){
layout(matrix(c(1),nc=1, byrow = TRUE))
par(mar=c(5,5,3,1))
plot(0,0,ylab="Y-coordinates (micron)",xlab="X-coordinates (micron)",xlim=c(0-max(iso[,"XCAL"],na.rm=TRUE)*0.01,max(iso[,"XCAL"],na.rm=TRUE)),ylim=c(0,max(iso[,"YCAL"],na.rm=TRUE)),col="white",main=paste(unique(iso[,"ID"]),unique(iso[,"YEAR"]),sep=" - "))
points(iso[,"XCAL"],iso[,"YCAL"],pch=16,cex=0.5)
for(c in c(1:10)){
abline(lm(c(seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"],na.rm=TRUE))),lty=1,col="black")
text(0-max(iso[,"XCAL"],na.rm=TRUE)*0.01,seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],round(lm(c(seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"],na.rm=TRUE)))$coefficients[2],2),cex=0.8,pos=3)}
lines(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),1],cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),2],lwd=2,col="grey")
text(max(iso[,"XCAL"],na.rm=TRUE),as.numeric(lm(iso[,"YCAL"]~iso[,"XCAL"])$coefficients[1]+lm(iso[,"YCAL"]~iso[,"XCAL"])$coefficients[2]*max(iso[,"XCAL"],na.rm=TRUE)),"H",col="grey",pos=3)
lines(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),1],cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),2],lwd=2,col="grey")
text(as.numeric(lm(iso[,"XCAL"]~iso[,"YCAL"])$coefficients[1]+lm(iso[,"XCAL"]~iso[,"YCAL"])$coefficients[2]*max(iso[,"YCAL"],na.rm=TRUE)),max(iso[,"YCAL"],na.rm=TRUE),"V",col="grey",pos=4)
}
option<-'h'
output<-matrix(nrow=length(iso[,"XCAL"]),ncol=2)
colnames(output)<-c("X_CAL","Y_CAL")
if(option=="h"){model<-lm(iso[,"YCAL"]~iso[,"XCAL"])}
if(option!="v"&option!="h"){
option<-as.numeric(option)
model<-lm(c(mean(iso[,"YCAL"],na.rm=TRUE)-mean(iso[,"XCAL"],na.rm=TRUE)*option,mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"])))}
if(make.plot==TRUE){
abline(model,col="red",lwd=2)}
y_model<-as.numeric(c(model$coefficients[2]*0+model$coefficients[1],model$coefficients[2]*100+model$coefficients[1]))
change_angle<-atan((y_model[2]-y_model[1])/(100-0))*(180/pi)
for(p in c(1:length(iso[,"XCAL"]))){
r<-sqrt(iso[p,"XCAL"]^2+iso[p,"YCAL"]^2)
radians<-c(0:360)*pi/180
x_line<-r*sin(radians)
y_line<-r*cos(radians)
current_angle<-atan(iso[p,"XCAL"]/iso[p,"YCAL"])*(180/pi)
new_angle<-current_angle+change_angle
x_new<-r*sin(new_angle*(pi/180))
y_new<-r*cos(new_angle*(pi/180))
if(make.plot==TRUE){points(x_new,y_new,pch=16,col="red",cex=1)}
output[p,"X_CAL"]<-x_new
output[p,"Y_CAL"]<-y_new}
subtract_Y<-min(output[,"Y_CAL"],na.rm=TRUE)
if(subtract_Y<0){
output[,"Y_CAL"]<-output[,"Y_CAL"]-subtract_Y
}else{
output[,"Y_CAL"]<-output[,"Y_CAL"]
}
subtract_X<-min(output[,"X_CAL"],na.rm=TRUE)
if(subtract_X<0){
output[,"X_CAL"]<-output[,"X_CAL"]-subtract_X
}else{
output[,"X_CAL"]<-output[,"X_CAL"]
}
input[which(input[,"YEAR"]==year[i]),"XCAL"]<-output[,"X_CAL"]
input[which(input[,"YEAR"]==year[i]),"YCAL"]<-output[,"Y_CAL"]
}
}else{
#if(is.numeric(list)!=TRUE)stop('list is not numeric')
if(length(list)!=length(year))stop('length of list is not equal to years in data.frame')
for(i in c(1:length(year))){
#i<-1
iso<-input[which(input[,"YEAR"]==year[i]),]
iso[,"XCAL"]<-iso[,"XCAL"]-(min(iso[,"XCAL"],na.rm=TRUE))+1
iso[,"YCAL"]<-iso[,"YCAL"]-(min(iso[,"YCAL"],na.rm=TRUE))+1
if(make.plot==TRUE){
layout(matrix(c(1),nc=1, byrow = TRUE))
par(mar=c(5,5,3,1))
plot(0,0,ylab="Y-coordinates (micron)",xlab="X-coordinates (micron)",xlim=c(0-max(iso[,"XCAL"],na.rm=TRUE)*0.01,max(iso[,"XCAL"],na.rm=TRUE)),ylim=c(0,max(iso[,"YCAL"],na.rm=TRUE)),col="white",main=paste(unique(iso[,"ID"]),unique(iso[,"YEAR"]),sep=" - "))
points(iso[,"XCAL"],iso[,"YCAL"],pch=16,cex=0.5)
for(c in c(1:10)){
abline(lm(c(seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"],na.rm=TRUE))),lty=1,col="black")
text(0-max(iso[,"XCAL"],na.rm=TRUE)*0.01,seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],round(lm(c(seq(from=min(iso[,"YCAL"],na.rm=TRUE),to=max(iso[,"YCAL"],na.rm=TRUE),length.out=10)[c],mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"],na.rm=TRUE)))$coefficients[2],2),cex=0.8,pos=3)}
lines(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),1],cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),2],lwd=2,col="grey")
text(max(iso[,"XCAL"],na.rm=TRUE),as.numeric(lm(iso[,"YCAL"]~iso[,"XCAL"])$coefficients[1]+lm(iso[,"YCAL"]~iso[,"XCAL"])$coefficients[2]*max(iso[,"XCAL"],na.rm=TRUE)),"H",col="grey",pos=3)
lines(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),1],cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),2],lwd=2,col="grey")
text(as.numeric(lm(iso[,"XCAL"]~iso[,"YCAL"])$coefficients[1]+lm(iso[,"XCAL"]~iso[,"YCAL"])$coefficients[2]*max(iso[,"YCAL"],na.rm=TRUE)),max(iso[,"YCAL"],na.rm=TRUE),"V",col="grey",pos=4)
}
horiz<-cbind(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),1],cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[order(cbind(iso[,"XCAL"],predict(lm(iso[,"YCAL"]~iso[,"XCAL"])))[,1]),2])
verti<-cbind(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),1],cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[order(cbind(predict(lm(iso[,"XCAL"]~iso[,"YCAL"])),iso[,"YCAL"])[,1]),2])
option<-list[i]
output<-matrix(nrow=length(iso[,"XCAL"]),ncol=2)
colnames(output)<-c("X_CAL","Y_CAL")
if(option!="v"&option!="h"){
option<-as.numeric(option)
model<-lm(c(mean(iso[,"YCAL"],na.rm=TRUE)-mean(iso[,"XCAL"],na.rm=TRUE)*option,mean(iso[,"YCAL"],na.rm=TRUE))~c(0,mean(iso[,"XCAL"])))}
if(option=="v"){
option<-option
model<-lm(verti[,2]~verti[,1])
if(make.plot==TRUE){ abline(model,col="red",lwd=2)}
model<-lm(iso[,"XCAL"]~iso[,"YCAL"])
y1<-mean(iso[,"YCAL"],na.rm=TRUE)
x1<-mean(iso[,"XCAL"],na.rm=TRUE)
y2<-max(iso[,"YCAL"],na.rm=TRUE)
x2<-summary(model)$coefficient[1]+summary(model)$coefficient[2]*y2
r<-y2-y1
radians<-c(0:360)*pi/180
x_line<-r*sin(radians)+x1
y_line<-r*cos(radians)+y1
new_angle<-atan( (x2-x1)/ (y2-y1) )*(180/pi)+90
x2<-r*sin(new_angle*(pi/180))+x1
y2<-r*cos(new_angle*(pi/180))+y1
model<-(lm(c(y1,y2)~c(x1,x2)))
}
if(option=="h"){
option<-option
model<-lm(horiz[,2]~horiz[,1])}
if(make.plot==TRUE&option!="v"){
abline(model,col="red",lwd=2)}
y_model<-as.numeric(c(model$coefficients[2]*0+model$coefficients[1],model$coefficients[2]*100+model$coefficients[1]))
change_angle<-atan((y_model[2]-y_model[1])/(100-0))*(180/pi)
for(p in c(1:length(iso[,"XCAL"]))){
r<-sqrt(iso[p,"XCAL"]^2+iso[p,"YCAL"]^2)
radians<-c(0:360)*pi/180
x_line<-r*sin(radians)
y_line<-r*cos(radians)
current_angle<-atan(iso[p,"XCAL"]/iso[p,"YCAL"])*(180/pi)
new_angle<-current_angle+change_angle
x_new<-r*sin(new_angle*(pi/180))
y_new<-r*cos(new_angle*(pi/180))
if(make.plot==TRUE){points(x_new,y_new,pch=16,col="red",cex=1)}
output[p,"X_CAL"]<-x_new
output[p,"Y_CAL"]<-y_new}
subtract_Y<-min(output[,"Y_CAL"],na.rm=TRUE)
if(subtract_Y<0){
output[,"Y_CAL"]<-output[,"Y_CAL"]-subtract_Y
}else{
output[,"Y_CAL"]<-output[,"Y_CAL"]
}
subtract_X<-min(output[,"X_CAL"],na.rm=TRUE)
if(subtract_X<0){
output[,"X_CAL"]<-output[,"X_CAL"]-subtract_X
}else{
output[,"X_CAL"]<-output[,"X_CAL"]
}
input[which(input[,"YEAR"]==year[i]),"XCAL"]<-output[,"X_CAL"]
input[which(input[,"YEAR"]==year[i]),"YCAL"]<-output[,"Y_CAL"]
}
}
}
return(input)
}
requireNamespace(base)
requireNamespace('base')
devtools::load_all()
anatomy.data
input<-example.data(species="LOT_PICEA")
first.cell(input, frac.small = 0.5, yrs = 2008, make.plot = T)
align(input, year=2007, list=FALSE,interact=TRUE, make.plot=TRUE)
source('C:/Users/ahurl/OneDrive/DOC/PhD/author/raptor/R/align.R')
align(input, year=2007, list=FALSE,interact=TRUE, make.plot=TRUE)
align(input, year=2007, list=FALSE,interact=TRUE, make.plot=TRUE)
align(input, year=2007, list=FALSE,interact=TRUE, make.plot=TRUE)
source('C:/Users/ahurl/OneDrive/DOC/PhD/author/raptor/R/align.R')
align(input, year=2007, list=FALSE,interact=TRUE, make.plot=TRUE)
devtools::load_all(".")
par()
opar <- par()
